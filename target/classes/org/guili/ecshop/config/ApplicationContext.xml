<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">
           
<!-- 
    <bean id="propertyConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>classpath:/org/guili/ecshop/config/jdbc.properties</value>  
            </list>  
        </property>  
    </bean>
     -->
    <context:property-placeholder location="classpath:/org/guili/ecshop/config/jdbc.properties" />
     <!-- c3p0数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" >  
        <property name="driverClass" value="${jdbc.driver}">  
        </property>  
        <property name="jdbcUrl" value="${jdbc.url}">  
        </property>  
        <property name="user" value="${jdbc.username}">  
        </property>  
        <property name="password" value="${jdbc.password}">
        </property>
        <property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
		       属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
		       如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		  <property name="maxStatements" value="${jdbc.maxStatements}"/>
		<!--连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出-->
		 <!--SQLEXCEPTION，如果设置0，则无限等待。Default:0-->
		 <!-- <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/> -->
		<!-- 
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<property name="preferredTestQuery">
			<value><![CDATA[${jdbc.preferredTestQuery}]]></value>
		</property>
		 -->
    </bean>
    <!-- 
     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driver}">  
        </property>  
        <property name="url" value="${jdbc.url}">  
        </property>  
        <property name="username" value="${jdbc.username}">  
        </property>  
        <property name="password" value="${jdbc.password}">
        </property> 
    </bean> 
     -->
     <!--数据源的代理工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="configLocation" value="classpath:/org/guili/ecshop/mybatis/SqlMapConfig.xml"></property>  
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>
    
    <!-- 由spring管理mybatis的事物 -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  
    <!-- 定义拦截器，用来指定事物属性，级别，和异常处理 -->  
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">  
        <property name="transactionManager" ref="transactionManager"></property>  
        <property name="transactionAttributes">  
            <props>  
                <!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;   
                PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常;   
                PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P  
                ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起;   
                PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常;   
                +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->  
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>  
                <prop key="del*"> PROPAGATION_SUPPORTS</prop>  
                <prop key="update*">PROPAGATION_REQUIRED</prop>  
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>  
            </props>  
        </property>  
    </bean>  
    <!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->  
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">  
        <property name="beanNames">  
            <!-- 对类名以MybatisService结尾的类进行代理 -->  
            <value>*Service</value>  
        </property>  
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->  
        <property name="interceptorNames">
            <list>  
                <value>transactionInterceptor</value>  
            </list>  
        </property>  
    </bean>
    <!-- spring ioc配置 -->
    <import resource="spring-dao.xml"/>
    <import resource="spring-service.xml"/>
    <!-- 加载定时任务和beans -->
</beans>